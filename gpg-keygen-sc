#!/usr/bin/env bash

# Log functions
l_ok() { echo -e "\e[32;01m[OK]\e[00;32m $1 \e[0;39;49m"; }
l_info() { echo -e "\e[36;01m[INFO]\e[00;36m $1 \e[0;39;49m"; }
l_warn() { echo -e "\e[33;01m[WARN]\e[00;33m $1 \e[0;39;49m"; }
l_error() { echo -e "\e[31;01m[ERR]\e[00;31m $1 \e[0;39;49m"; }
fatal() {
	echo -e "\e[30;41;01m[FATAL]\e[00;31m $1 \e[0;39;49m"
	[[ -d "/proc/${AGENTPID}" ]] && kill "$AGENTPID" # Kill gpg-agent if running
	exit 1
}

l_info "Running $0"

# We need the config file, and some elements defined in it
CONFFILE="${1:-"keycfg"}"
[[ -f "$CONFFILE" ]] && source $CONFFILE || warn "No keyfile \"$CONFFILE\" found"
[[ -z "$NAME" ]] && read -p "Name: " NAME
[[ -z "$NAME" ]] && fatal "No name defined!"
[[ -z "$EMAIL" ]] && read -p "E-Mail: " EMAIL
[[ -z "$EMAIL" ]] && fatal "No email defined!"
FILENAME="$(echo "$NAME" | tr ' ' '_')"
COMMENT="${COMMENT:-$(date "+%d%m%y")}"
EXPIRATION="${EXPIRATION:-"2y"}"
KEYTYPE="${KEYTYPE:-"RSA"}"
KEYSIZE="${KEYSIZE:-"4096"}"
KEYNAME="${KEYTYPE,,}${KEYSIZE}"
OUTDIR="${OUTDIR:-"keyout"}"
FILENAME="$(echo "${NAME,,}" | tr ' ' '_')"
LOGFILE="${OUTDIR}/${FILENAME}.log"
SURNAME="$(echo "$NAME" | cut -d' ' -f2)"
FIRSTNAME="$(echo "$NAME" | cut -d' ' -f1)"
IDENTITY="${NAME} <${EMAIL}>"; [[ -n "$COMMENT" ]] && IDENTITY="${NAME} (${COMMENT}) <${EMAIL}>"
NOSC="${NOSC:-false}"

# Check if outdir already exists
[[ ! -d "$OUTDIR" ]] && mkdir "$OUTDIR" || l_warn "Output directory already exists"

# Get passphrase
l_info "Need a passphrase to continue"
read -s -p "Passphrase: " PASSPHRASE && echo ""
read -s -p "Confirm: " REPEAT && echo ""
[[ -z "$PASSPHRASE" || -z "$REPEAT" ]] && fatal "Empty passphrase!"
[[ "$PASSPHRASE" != "$REPEAT" ]] && fatal "Passphrases don't match!"

# Print summary
l_info "Creating key for $IDENTITY"

# Kill existing gpg-agent if running (only one can access the card at any time)
l_info "Checking for existing gpg-agent instances"
if [[ "$(pgrep -c gpg-agent)" -ne "0" ]]; then
	l_warn "Another gpg-agent is already running, killing it, you may have to restart it yourself after"
	killall gpg-agent
fi

# Prepare GPG env
l_info "Prepare GPG"
export GNUPGHOME="$(mktemp -d)"

# Configure GPG
l_info "Configure GPG"
cat > $GNUPGHOME/gpg.conf << EOF
#Minimal info leak
no-emit-version
no-comments
export-options export-minimal

#Crypto options
personal-cipher-preferences AES256
personal-digest-preferences SHA512
default-preference-list SHA512 SHA384 SHA256 RIPEMD160 AES256 TWOFISH BLOWFISH ZLIB BZIP2 ZIP Uncompressed
cipher-algo AES256
digest-algo SHA512
cert-digest-algo SHA512
compress-algo ZLIB
disable-cipher-algo 3DES
weak-digest SHA1

#S2K options
s2k-cipher-algo AES256
s2k-digest-algo SHA512
s2k-mode 3
s2k-count 65011712

# Batch options
use-agent
pinentry-mode loopback
EOF

cat > $GNUPGHOME/gpg-agent.conf << EOF
allow-loopback-pinentry
pinentry-program /usr/bin/pinentry-tty
EOF

# Start gpg-agent (and store it's PID to kill it when cleaning up)
l_info "Start gpg-agent"
gpg-agent --homedir $GNUPGHOME --daemon &>$LOGFILE
[[ $? -ne 0 ]] && fatal "Cannot start gpg-agent"
AGENTPID="$(pgrep -f "gpg-agent --homedir $GNUPGHOME")"
l_ok "Agent started ($AGENTPID)"

# Generate master key
l_info "Generate the master key"
gpg --batch --passphrase "$PASSPHRASE" --quick-generate-key "$IDENTITY" "$KEYNAME" "cert" "$EXPIRATION" &>$LOGFILE
[[ $? -ne 0 ]] && fatal "Can not generate master key"
MASTERPRINT=$(gpg --list-options show-only-fpr-mbox --list-secret-keys 2>$LOGFILE | cut -d' ' -f1)
l_ok "Master key has fingerprint $MASTERPRINT"

# Generate subkeys
l_info "Generate the (auth, encrypt, sign) subkeys"
gen_subkey() { gpg --batch --passphrase "$PASSPHRASE" --quick-add-key "$MASTERPRINT" "$KEYNAME" "$1" "$EXPIRATION" &>$LOGFILE; [[ $? -ne 0 ]] && fatal "Cannot generate $1 subkey"; }
gen_subkey auth
gen_subkey encrypt
gen_subkey sign

# Export public key
l_info "Export the public key"
PUBFILE="$OUTDIR/$FILENAME.pub"
gpg --export --armor "$MASTERPRINT" 2>$LOGFILE > $PUBFILE
[[ $? -ne -0 || ! -f "$PUBFILE" || -z "$(cat $PUBFILE)" ]] && fatal "Cannot export public key"
l_ok "Public key exported to $PUBFILE"

# Create revoke cert
## Theorically optional, but a good practice to have one available if key is compromised/lost in the future
## No batch mode for this one, so we have to echo the parameters (validation, 0 - no reason specified, empty description, confirm) in gpg's stdin
l_info "Export revocation certificate"
REVFILE="$OUTDIR/$FILENAME.revoke"
echo -en "y\n0\n\ny\n" | gpg --no-tty --passphrase "$PASSPHRASE" --armor --command-fd 0 --output "$REVFILE" --gen-revoke "$MASTERPRINT" &>$LOGFILE
[[ $? -ne 0 ]] && fatal "Cannot generate revocation certificate";
l_ok "Revocation available at $REVFILE if needed"

# Backup master key
## If paperkey exists, also export it to be printed
l_info "Export master key"
MKEYFILE="$OUTDIR/$FILENAME.master"
PKEYFILE="$OUTDIR/$FILENAME.paperkey"
gpg --passphrase "$PASSPHRASE" --armor --output "$MKEYFILE" --export-secret-key "$MASTERPRINT" &>$LOGFILE
[[ $? -ne 0 ]] && fatal "Cannot export master key (pem)";
if [[ -n "$(whereis paperkey | cut -d':' -f2)" ]]; then
	gpg --passphrase "$PASSPHRASE" --export-secret-key "$MASTERPRINT" 2>$LOGFILE | paperkey --output-type raw | base64 > $PKEYFILE
	[[ $? -ne 0 ]] && fatal "Cannot export master key (paperkey)";
fi
l_ok "Take care to backup your master key in a *secure* place!"

# Isolate subkeys
l_info "Isolate subkeys"
SKEYFILE="$OUTDIR/$FILENAME.subkeys"
gpg --passphrase "$PASSPHRASE" --armor --output "$SKEYFILE" --export-secret-subkeys "$MASTERPRINT" &>$LOGFILE
[[ $? -ne 0 ]] && fatal "Cannot export subkeys";
l_ok "A backup of the subkeys without master key is available at $SKEYFILE"

if [[ "$NOSC" != "true" ]]; then
	# Delete secret key from tmp keychain
	l_info "Deleting secret key from tmp keychain"
	gpg --batch --yes --passphrase "$PASSPHRASE" --delete-secret-key "$MASTERPRINT" &>$LOGFILE
	[[ $? -ne 0 ]] && fatal "Cannot delete secret key";

	while true ; do
		# Import subkeys (to export them to the ykey)
		l_info "Import subkeys (without master key)"
		gpg --passphrase "$PASSPHRASE" --import "$SKEYFILE" &>$LOGFILE
		[[ $? -ne 0 ]] && fatal "Cannot import subkeys";
		l_ok "Ready to export to smartcard"

		# Reset smartcard
		l_info "Reset smartcard"
		echo -en "admin\nfactory-reset\ny\nyes\nquit\n" | gpg --no-tty --command-fd 0 --card-edit &>$LOGFILE
		[[ $? -ne 0 ]] && fatal "Cannot reset smartcard";
		l_ok "Smartcard is clean and ready to be written to"

		# Export subkeys to smartcard
		l_info "Export (sign, crypt, auth) subkeys to smartcard"
		send_subkey() { echo -en "toggle\nkey $1\nkeytocard\n$2\n$PASSPHRASE\n12345678\n12345678\nsave\n" | gpg --no-tty --expert --command-fd 0 --edit-key "$MASTERPRINT" &>$LOGFILE; [[ $? -ne 0 ]] && fatal "Cannot export subkey ($1,$2)"; }
		send_subkey 1 3 # Send subkey 1 (A) to slot 3 (Auth)
		send_subkey 2 2 # Send subkey 2 (E) to slot 2 (Decrypt)
		send_subkey 3 1 # Send subkey 3 (S) to slot 1 (Sign)

		# Set card holder name
		l_info "Set card holder infos"
		echo -en "admin\nname\n${SURNAME}\n${FIRSTNAME}\n12345678\n" | gpg --no-tty --card-edit --command-fd 0 &>$LOGFILE
		[[ $? -ne 0 ]] && fatal "Cannot set card holder infos";
		l_ok "Card is ready for final step"

		# Set (user, admin, reset) pins
		l_info "Set pin codes"
		setpin() { echo -en "admin\npasswd\n$1\n$2\n$3\n$3\nq\n" | gpg --no-tty --card-edit --command-fd 0 &>$LOGFILE; [[ $? -ne 0 ]] && fatal "Cannot set pin code ($1)"; }
		setpin 1 "123456" "$PASSPHRASE" # Set pin 1 (user) from default 123456 to passphrase
		setpin 3 "12345678" "$PASSPHRASE" # Set pin 2 (admin) from default 12345678 to passphrase
		setpin 4 "12345678" "$PASSPHRASE" # Set pin 4 (reset) from default 12345678 to passphrase
		l_ok "All done"

		read -p "Type \"done\" to finish, or press enter for new smartcard: " TMPSC
		[[ $TMPSC == "done" ]] && break

		# We want a new smartcard, we need to wipe gpg's cache because
		#  subkeys are now stubs and will not export to smartcard again
		# This is a ugly hack, but well...
		l_info "Prepare for next smartcard"
		rm $GNUPGHOME/private-keys-v1.d/*.key
	done
fi

# Finishing touches
## Kill gpg-agent
l_info "Kill gpg-agent"
[[ -d "/proc/${AGENTPID}" ]] && kill "$AGENTPID" || l_warn "Agent not running?"
## Cleanup (remove GPG env home)
l_info "Cleaning up"
rm -rf "$GNUPGHOME"

## Print final message
l_ok "Done!"
